{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","title","body","posts","componentDidMount","getBlogPost","axios","get","then","res","setState","data","catch","console","log","handleChange","target","name","value","submit","e","preventDefault","payload","url","method","resetUserInput","displayBlogPosts","length","map","it","index","className","onSubmit","this","type","placeholder","onChange","cols","rows","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAiHeA,E,4MA3GbC,MAAO,CACLC,MAAO,GACPC,KAAM,GACNC,MAAM,I,EAGRC,kBAAoB,WAClB,EAAKC,e,EAGPA,YAAc,WACZC,IACGC,IAAI,QACJC,MAAK,SAACC,GACL,EAAKC,SAAS,CAACP,MAAOM,EAAIE,UAG3BC,OAAM,WACLC,QAAQC,IAAI,4B,EAIlBC,aAAe,YAAa,IAAXC,EAAU,EAAVA,OACRC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,MAGb,EAAKR,SAAL,eAAgBO,EAAOC,K,EAIzBC,OAAS,SAACC,GACRA,EAAEC,iBAEF,IAAMC,EAAU,CACdrB,MAAO,EAAKD,MAAMC,MAClBC,KAAM,EAAKF,MAAME,MAGnBI,IAAM,CACJiB,IAAI,QACJC,OAAQ,OACRb,KAAMW,IAEPd,MAAK,WACJK,QAAQC,IAAI,aACZ,EAAKW,iBACL,EAAKpB,iBAENO,OAAM,kBAAIC,QAAQC,IAAI,8B,EAGzBW,eAAgB,WACd,EAAKf,SAAS,CAAET,MAAO,GAAIC,KAAM,M,EAGnCwB,iBAAmB,SAACvB,GAClB,OAAKA,EAAMwB,OAGJxB,EAAMyB,KAAI,SAACC,EAAGC,GAEnB,OACE,gCACE,6BAAKD,EAAG5B,QACR,4BAAI4B,EAAG3B,SAFC4B,MANY,M,4CAc5B,WAEE,OACE,sBAAKC,UAAU,MAAf,UACE,0CACA,uBAAMC,SAAUC,KAAKd,OAArB,UACE,qBAAKY,UAAU,aAAf,SACE,uBACEG,KAAK,OACLC,YAAY,QACZlB,KAAK,QACLC,MAAOe,KAAKjC,MAAMC,MAClBmC,SAAUH,KAAKlB,iBAGnB,qBAAKgB,UAAU,aAAf,SACE,0BACEd,KAAK,OACLkB,YAAY,OACZE,KAAK,KACLC,KAAK,KACLpB,MAAOe,KAAKjC,MAAME,KAClBkC,SAAUH,KAAKlB,iBAGnB,4CACA,qBAAKgB,UAAU,qBAAf,SAEIE,KAAKP,iBAAiBO,KAAKjC,MAAMG,mB,GAnG7BoC,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8fcecea1.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nimport './App.css'\n\nclass App extends React.Component {\n  state ={\n    title: '',\n    body: '',\n    posts:[]\n  }\n\n  componentDidMount = ()=>{\n    this.getBlogPost()\n  }\n\n  getBlogPost = ()=>{\n    axios\n      .get(\"/api\")\n      .then((res) => {\n        this.setState({posts: res.data})\n        //console.log(\"data received\", res.data);\n      })\n      .catch(() => {\n        console.log(\"error receiving data\");\n      });\n  }\n\n  handleChange = ({target})=>{\n    const {name, value} = target\n    //console.log(\"event: \", event);\n    //console.log(\"this: \", this);\n    this.setState({[name]: value})\n\n  }\n\n  submit = (e) =>{\n    e.preventDefault();\n\n    const payload = {\n      title: this.state.title,\n      body: this.state.body\n    };\n\n    axios({\n      url:\"/save\",\n      method: 'POST',\n      data: payload\n    })\n    .then(()=>{\n      console.log(\"Data sent\")\n      this.resetUserInput();\n      this.getBlogPost();\n  })\n    .catch(()=>console.log(\"Internal sevrver error\"))\n  }\n\n  resetUserInput =()=>{\n    this.setState({ title: '', body: '' });\n  }\n\n  displayBlogPosts = (posts)=>{\n    if (!posts.length) return null\n    //return JSON.stringify(posts);\n    //console.log(posts);\n    return posts.map((it,index) => {\n      //console.log(it.title);\n      return (\n        <div key={index}>\n          <h3>{it.title}</h3>\n          <p>{it.body}</p>\n        </div>\n      );\n    })\n  }\n\n  render(){\n    //console.log(\"body: \",this.state)\n    return (\n      <div className=\"app\">\n        <h2>MERN-App</h2>\n        <form onSubmit={this.submit}>\n          <div className=\"form-input\">\n            <input\n              type=\"text\"\n              placeholder=\"Title\"\n              name=\"title\"\n              value={this.state.title}\n              onChange={this.handleChange}\n            />\n          </div>\n          <div className=\"form-input\">\n            <textarea\n              name=\"body\"\n              placeholder=\"Body\"\n              cols=\"30\"\n              rows=\"10\"\n              value={this.state.body}\n              onChange={this.handleChange}\n            ></textarea>\n          </div>\n          <button>Submit</button>\n          <div className=\"blog-post__display\">\n            {\n              this.displayBlogPosts(this.state.posts)\n            }\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}